#!/bin/bash
#
# sambascan2.sh - searches a network for SMB-Shares and list them.

# Copyright 2002-2011 (c) Claudio Clemens

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place - Suite 330, Boston, MA 02111-1307, USA.

# TODO: Option for creating listing
# TODO: Isn't nmap to agresive?
# TODO: Multithreading

# The line below is an alternative to the sed, but if we perl, then if should
# be all in perl :)
# perl -pe "s/^(.*?[^ ]) + [AHRSD]* *  ([0-9]+)  [A-Za-z]+ [A-Za-z]+ +[0-9]+
# [0-9:]+ [0-9]+$/\1:\2/" samba/127.0.0.1-HALFLING-Film.txt | less

#set -x

VERSION=0.5.0
DEBUG=YES
NOHOME=0
WORKDIR=$HOME/.sambascan2
PASSWORD=$WORKDIR/logins.txt
TTEMP=$WORKDIR/temp.temp.$$
LTEMP1=$WORKDIR/list1.temp.$$
LTEMP2=$WORKDIR/list2.temp.$$
SED="/bin/sed"
GREP="/bin/grep"
AWK="mawk"
EGREP="/bin/grep -E"
TIMEOUT=300 # 5 min listing in a share
INFOLEVEL=2  # 0 quiet/error, 1 warn, 2 info, 3 debug

function display() {
    LEVEL=$1
    shift
    REST="$@"
    if [ -n "$LEVEL" -a "$LEVEL" -le "$INFOLEVEL" ]
    then
        [ $LEVEL -eq 0 ] && echo -n "[ERROR] " 1>&2 
        [ $LEVEL -eq 1 ] && echo -n "[WARN] " 1>&2
        [ $LEVEL -eq 2 ] && echo -n "[INFO] " 
        [ $LEVEL -eq 3 ] && echo -n "[DEBUG] " 
        if [ $LEVEL -lt 2 ]
        then
            echo $REST 1>&2
        else
            echo $REST
        fi
    fi
}

function checkbinaries (){
    BAD=0
    for i in nmap smbclient
    do
        WHERE=`which $i`
        if [ "$WHERE" ]
        then
            display 3 "$i found."
        else
            display 0 "$i not found. Please install it, so I can run."
            BAD=1
        fi
    done
    [ $BAD -gt 0 ] && display 1 "Some Binaries not found... exiting" && exit 1
}

function parseparameters (){
    OLDS=0
    MINSIZE=0
    MAXSIZE=0

    # TODO Test arg with more than one argument. -a -g -d
    args=`getopt -n $0 -o ohvlns:m:M:f:V:g:d:a: \
        -l oldhosts,help,version,listauth,nohome,sname:,sizemin:,sizemax:,file:,verbose:,get:,delete:,add: \
        -- "$@"`
    [ $? -eq 0 ] || displayhelp
    eval set -- "$args"

    while [ "$1" ]
    do
        param=$1
        shift
        case "$param" in
            -h|--help)
                displayhelp
                ;;
            -o|--oldhosts)
                OLDS=1
                ;;
            -s|--sname)
                if [ "$SEARCH" ]
                then
                    SEARCH="$SEARCH|"
                fi
                SEARCH="$SEARCH$1"
                shift
                ;;
            -m|--sizemin)
                MINSIZE=$1
                shift
                ;;
            -M|--sizemax)
                MAXSIZE=$1
                shift
                ;;
            -a|--add)
                addAuth $1 $2 $3 $4 $5
                exit
                ;;
            -g|--get)
                getAuth $1 $2
                exit
                ;;
            -d|--delete)
                deleteAuth $1 $2
                exit
                ;;
            -l|--listauth)
                showAuths
                exit
                ;;
            -n|--nohome)
                NOHOME=1
                ;;
            -f|--file)
                READFILE=$1
                shift
                ;;
            -v|--version)
                echo $VERSION
                exit 0
                ;;
            -V|--verbose)
                INFOLEVEL=$1
                shift 
                ;;
            --) 
                break
                ;;
        esac
    done
    NETS="$@"
    display 2 "Options o:$OLDS s:$SEARCH m:$MINSIZE M:$MAXSIZE n:$NOHOME f:$READFILE V:$INFOLEVEL"
    display 2 "Nets: $NETS"
    [ "$SEARCH" ] && searchfiles
    if [ -z "$NETS" -a $OLDS -eq 0 -a -z "$READFILE" ]
    then
        display 1 "Please give a host or net you want to scan."
        displayhelp
    fi
}

function addAuth {
    myhost=$1
    myuser=$2
    mypass=$3
    myip=$4     # opt
    myshare=$5  # opt

    if (! $GREP -i "^$myhost:" $PASSWORD > /dev/null 2>&1)
    then
        touch $PASSWORD
        chmod 600 $PASSWORD
        echo "$myhost:$myip:$myshare:$myuser%$mypass" >> $PASSWORD
    fi
}

function getAuth {
    myhost=$1
    myip=$2
    myauth=`$GREP -i "^$myhost:" $PASSWORD 2> /dev/null | cut -f 4 -d:`
    if [ "x$myauth" == "x" ]
    then
        myauth=`$GREP -i "^[^:]*:$myip:" $PASSWORD 2> /dev/null | cut -f 4 -d:`
        if [ "x$myauth" == "x" ]
        then
            myauth='User%'
        fi
    fi
    echo $myauth
}

function deleteAuth {
    myhost=$1
    myip=$2
    touch $PASSWORD.tmp
    chmod 600 $PASSWORD.tmp
    $GREP -v -i "^$myhost:" $PASSWORD > $PASSWORD.tmp
    mv $PASSWORD.tmp $PASSWORD
    if [ "$myip" ]
    then
        touch $PASSWORD.tmp
        chmod 600 $PASSWORD.tmp
        $GREP -v "^[^:]*:$myip:" $PASSWORD > $PASSWORD.tmp
        mv $PASSWORD.tmp $PASSWORD
    fi
}

function showAuths {
    echo ""
    echo "List of logins"
    echo "=============="
    [ -f $PASSWORD ] && cut -f 1 -d"%" $PASSWORD
}

function searchfiles {
    display 2 "Searching files:"
    SEARCH="($SEARCH)"
    zcat $WORKDIR/[0-9]*.gz 2> /dev/null | $EGREP -i "$SEARCH" | while read LINE
    do
        SIZE=`echo $LINE | cut -f 5 -d:`
        if [ $SIZE -ge $MINSIZE ]
        then
            if [ $MAXSIZE -gt 0 ]
            then
                [ $SIZE -le $MAXSIZE ] && echo "$LINE"
            else
                echo "$LINE"
            fi
        fi
    done
    # TODO [ "$LINE" ] || display 2 "Nothing found"

    exit 0
}

function initialize {
    checkbinaries;
    [ -d "$WORKDIR" ] || mkdir $WORKDIR || display 1 "WARNING: Workdir couldn't be created!"
    find $WORKDIR -mtime +15 -name "[0-9]*.txt.gz" | (while read a; do echo "$a" expired && rm -f "$a"; done)
}

# $1 = ip, $2 = share, $3 = name
function mytimeout {
    myauth=`getAuth $3 $1`
    smbclient "//$1/$2" -c "recurse;ls" -N -U $myauth -d0 -D . > "$TTEMP" 2> /dev/null &
    MYPID=$!
    (sleep $TIMEOUT && kill $MYPID 2> /dev/null > /dev/null) &
    wait $MYPID 2> /dev/null > /dev/null
}

# $1 = ip, $2 = name
function list_shares {
    myauth=`getAuth $2 $1`
    # till Version 0.4.1 : SHARES=`smbclient -L $1 -N -U $myauth 2> /dev/null | $EGREP "^[[:blank:]]+[^[:blank:]]+[[:blank:]]+Disk[[:blank:]]+" | $SED "s/^[[:blank:]]\+\([^[:blank:]]\+\).*/\1/g" | $EGREP -v "(ADMIN|IPC)\\\\$"`
    SHARES=`smbclient -L $1 -N -U $myauth 2> /dev/null | $EGREP "\<Disk\>" | \
        $SED -e "s/^[[:blank:]]\+\(\<.\+[^[:blank:]]\)[[:blank:]]*Disk.*/\1/g" -e "s/ /%20/g" | $EGREP -v "(ADMIN|IPC)\\\\$"`
    SHARES=`echo $SHARES`
    if [ "$SHARES" ]
    then
        display 2 " ... Working on $2: ($SHARES)."
        for i in $SHARES
        do
            if (echo $myauth | $GREP "^$i%" > /dev/null)
            then
                [ $NOHOME -eq 1 ] && continue
            fi

            # Here we change the SPACES back.
            i=`echo "$i" | $SED -e "s/%20/ /g"`
            if [ -n "$i" ]
            then
                mymsg="     Listing +($i)"
                # Because there can be some Password-shares we send stderr to null
                mytimeout "$1" "$i" "$2" 2> /dev/null
                if ($EGREP "(ERRbadpw|ACCESS_DENIED|WRONG_PASSWORD|BAD_NETWORK_NAME)" "$TTEMP" > /dev/null)
                then
                    mymsg="$mymsg... no access."
                    rm "$TTEMP"
                    continue
                elif [ `wc -l < "$TTEMP"` -le 4 ]
                then
                    mymsg="$mymsg... empty."
                    rm "$TTEMP"
                    continue
                fi
                $SED -e "s/\\\/\//g" -e "/added interface ip/d" -e "/[0-9]\+ blocks of size/d" -e "/ D[RHSA]* \+0 /d" \
                -e "/session request to .* failed (Called name not present)/d" \
                -e "s/^\(  .*\) \{2,\}A\?R\?H\?S\?\([0-9 ]\{9,\}\)  [A-Za-z 0-9:]\{24\}$/\1:\2/g" \
                -e "s/ *: */:/g" \
                "$TTEMP" | $GREP -v "login successful" > "$LTEMP1"
                rm "$TTEMP"

                # Now format the list the way we want
                # Because we need to read each line, it is a big overhead, and scanning takes now longer
                PATHNAME=/
                NOTHING=1
                while read a
                do
                    [ "$a" == "" ] && continue
                    if (echo "$a" | $GREP "^/" > /dev/null)
                    then
                        PATHNAME="$a"/
                    else
                        NOTHING=0
                        echo "$1:$i:${PATHNAME}:${a}"
                    fi
                done < $LTEMP1 >> "$LTEMP2"
                [ $NOTHING -eq 1 ] && echo "$1:$i:${PATHNAME}:" >> "$LTEMP2"
                rm "$LTEMP1"
                display 2 "$mymsg... done."
            fi
        done
        [ -s "$LTEMP2" ] && mv "$LTEMP2" "$WORKDIR/$1-$2.txt"
        rm -f "$LTEMP2"
        [ -e "$WORKDIR/$1-$2.txt" ] && gzip -f "$WORKDIR/$1-$2.txt"
    else
        display 3 "  ... No Shares."
    fi
    #reset -Q
}

function getlistofhosts {
    if [ -n "$DEBUG" ] 
    then
        if [ "$READFILE" ]
        then
            display 2 "Scanning hosts listed in file ==> $READFILE <=="
        else
            display 2 "Getting list of hosts from net ==> $NETS <=="
        fi
    fi
    if [ "$READFILE" ]
    then
        HOSTS=`cat $READFILE`
    else
        HOSTS=`nmap -n -sP -PS139,445 $NETS 2> /dev/null | $GREP ^Host | $SED "s/Host [( ]*\([0-9\.]*\).*/\1/g"`
    fi
    nHOSTS=`echo $HOSTS | wc -w`
    display 2 "Doing SMB work on $nHOSTS hosts."
}

function displayhelp {
cat << EOF

$0 usage:

    $0 [command] [network]

    Commands:
    -h --help       This help
    -o --oldhosts   Scan all already indexed hosts
    -s --sname      Search indexed files (may be used multiple times)
    -m --sizemin    By the search, display only files with size greater or
                    equal to this (bytes)
    -M --sizemax    By the search, display only files with size smaller or
                    equal to this (bytes)
    -a --add        Add Login data to database. Note that data will be saved as
                    plaintext.
                    Parameters: <hostname> <user> <password> [ip] [share].
                    Note: Share Auth is not supported by now
    -g --get        Get the Login data for a host.
                    Parameters: <hostname> [ip]
    -d --delete     Delete Login data for a host.
                    Parameters: <hostname> [ip]
    -l --listauth   List all auth data (without password)
    -n --nohome     Don't process home-directories
    -f --file       Read IPs from file.
                    Parameters: <filename>
    -v --version    Show version of the Program.
    -V --verbose    Set the verbose level: 0=quiet/error, 1=warn, 2=info, 3=debug 
                    Parameters: <level>
EOF
    exit
}

function getoldhosts {
    HOSTS=`(cd $WORKDIR; ls [0-9]* 2> /dev/null | cut -f 1 -d"-")`
    if [ "$HOSTS" ] 
    then
        [ -n "$DEBUG" ] && echo "Scanning hosts: $HOSTS"
    else
        echo "There is no old hosts to scan anymore."
    fi
}

function process_host {
        NAME=`nmblookup -A $1 | $GREP "-" | head -1 | cut -f 1 -d"<"`
        NAME=`echo $NAME`
        display 3 "Host: $NAME ($1)"
# Only Modify this section, if you know what you are doing.
# Insert your ACTION code here (e.g. scan for viruses)
# I will only list the shares
        list_shares "$1" "$NAME"
}

#### The Prog #####
initialize
parseparameters $@

if [ $INFOLEVEL -ge 2 ]
then
    echo "sambascan2 Version: $VERSION (c) Claudio Clemens"
    echo
    echo "sambascan2 comes with ABSOLUTELY NO WARRANTY; for details"
    echo "see the file COPYING.  This is free software, and you are welcome"
    echo "to redistribute it under certain conditions."
    echo
fi

if [ $OLDS -gt 0 ]
then
    getoldhosts
else
    getlistofhosts $NETS
fi

for i in $HOSTS
do
    process_host $i
done
# Kill forgotten sleeps
for i in `ps -ef 2> /dev/null | $GREP "sleep 120" | $GREP -v grep | $AWK '{print $2}'`
do
    kill $i
done

# Delete any file left out
find $WORKDIR -name "list*" -exec rm {} \;
